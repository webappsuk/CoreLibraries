<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Contract_Failed" xml:space="preserve">
    <value>Contract failed. {0}</value>
  </data>
  <data name="Contract_Failed_Message" xml:space="preserve">
    <value>{1}. {0}</value>
  </data>
  <data name="EventLogger_EventLogCannotBeNull" xml:space="preserve">
    <value>The event logger event log name cannot be empty.</value>
  </data>
  <data name="EventLogger_MachineNameCannotBeNull" xml:space="preserve">
    <value>The machine name can not be null</value>
  </data>
  <data name="EventLogger_NameCannotBeNull" xml:space="preserve">
    <value>The event logger name cannot be empty.</value>
  </data>
  <data name="FileLogger_BufferSize_Too_Big" xml:space="preserve">
    <value>The file buffer size '{0}' cannot exceed the maximum value of an int.</value>
  </data>
  <data name="FileLogger_BufferSize_Too_Small" xml:space="preserve">
    <value>The file  buffer size '{0}' cannot be less than 128 bytes.</value>
  </data>
  <data name="FileLogger_DirectoryAccessOrCreationError" xml:space="preserve">
    <value>Could not create file logger as error occurred when trying to create/access directory '{0}'.</value>
  </data>
  <data name="FileLogger_Ended_File" xml:space="preserve">
    <value>Finished writing logs to '{0}'</value>
  </data>
  <data name="FileLogger_ExtensionLongerThanFiveCharacters" xml:space="preserve">
    <value>Cannot create file logger as extension '{0}' has more than five characters.</value>
  </data>
  <data name="FileLogger_Extension_Invalid_Char" xml:space="preserve">
    <value>Cannot create file logger as extension '{0}' has invalid characters (only letters and digits allowed).</value>
  </data>
  <data name="FileLogger_FileDurationLessThanTenSeconds" xml:space="preserve">
    <value>Cannot create file logger as maximum log file duration '{0}' was less than 10s, which would cause too many log files to be created.</value>
  </data>
  <data name="FileLogger_FileNameFormatInvalid" xml:space="preserve">
    <value>Cannot create file logger as file name format '{0}' contains invalid characters.</value>
  </data>
  <data name="FileLogger_FileNameFormatNotSpecified" xml:space="preserve">
    <value>Cannot create file logger as file name format not specified.</value>
  </data>
  <data name="FileLogger_File_Creation_Failed" xml:space="preserve">
    <value>An error occurred whilst trying to create the '{0}' log file.</value>
  </data>
  <data name="FileLogger_File_Creation_Retry_Failed" xml:space="preserve">
    <value>Trying to find a unique log file name failed too many times.</value>
  </data>
  <data name="FileLogger_InvalidPathCreation" xml:space="preserve">
    <value>Cannot create file logger as file name format '{0}' led to invalid path creation.</value>
  </data>
  <data name="FileLogger_MaximumLogsLessThanTen" xml:space="preserve">
    <value>Cannot create file logger as maximum logs per file '{0}' was less than 10, which would cause too many log files to be created.</value>
  </data>
  <data name="FileLogger_PathCreatedOutsideDirectory" xml:space="preserve">
    <value>Cannot create file logger as file name format '{0}' led to invalid path creation. The file cannot be created outside the specified directory.</value>
  </data>
  <data name="FileLogger_Started_File" xml:space="preserve">
    <value>Began writing logs to '{0}' with '{1}' buffer.</value>
  </data>
  <data name="LogContext_Empty_Reservation" xml:space="preserve">
    <value>The reservation cannot be Guid.Empty.</value>
  </data>
  <data name="LogContext_Invalid_Reservation" xml:space="preserve">
    <value>The LogContext reservation cannot be Guid.Empty.</value>
  </data>
  <data name="LogContext_Key_Already_Reserved" xml:space="preserve">
    <value>The '{0}' key has already been reserved with a different reservation.</value>
  </data>
  <data name="LogContext_Key_Invalid_Char" xml:space="preserve">
    <value>Keys can only contain letters, digits or spaces.</value>
  </data>
  <data name="LogContext_Key_Invalid_First_Char" xml:space="preserve">
    <value>Key must start with a letter.</value>
  </data>
  <data name="LogContext_Key_Reservation_Failed_Prefix_Match" xml:space="preserve">
    <value>The '{0}' key matches the '{1}' prefix - which has already been reserved.</value>
  </data>
  <data name="LogContext_Key_Too_Long" xml:space="preserve">
    <value>The log context key '{0}' is longer than {1} characters (too long).</value>
  </data>
  <data name="LogContext_Key_Too_Short" xml:space="preserve">
    <value>The log context key '{0}' is less than {1} characters (too short).</value>
  </data>
  <data name="LogContext_Locked" xml:space="preserve">
    <value>Cannot change the values in a locked LogContext.</value>
  </data>
  <data name="LogContext_Null_Key" xml:space="preserve">
    <value>The log context key cannot be null.</value>
  </data>
  <data name="LogContext_Null_Prefix" xml:space="preserve">
    <value>The log context key prefix cannot be null.</value>
  </data>
  <data name="LogContext_Prefix_Already_Reserved" xml:space="preserve">
    <value>The '{0}' key prefix has already been reserved with a different reservation.</value>
  </data>
  <data name="LogContext_Prefix_Reservation_Failed_Key_Match" xml:space="preserve">
    <value>The '{0}' key prefix collides with the '{1}' key reservation.</value>
  </data>
  <data name="LogContext_Prefix_Reservation_Failed_Prefix_Match" xml:space="preserve">
    <value>The '{0}' key prefix matches the '{1}' prefix - which has already been reserved.</value>
  </data>
  <data name="LogContext_Prefix_Too_Long" xml:space="preserve">
    <value>The log context key prefix '{0}' is longer than {1} characters (too long).</value>
  </data>
  <data name="LogContext_Prefix_Too_Short" xml:space="preserve">
    <value>The log context key prefix '{0}' is less than {1} characters (too short).</value>
  </data>
  <data name="LogContext_Reserved_Key" xml:space="preserve">
    <value>The '{0}' key is reserved and cannot be added to a log context explicitly.</value>
  </data>
  <data name="LoggerBase_DoesNotSupportRetrieval" xml:space="preserve">
    <value>The {0} logger does not support log retrieval.</value>
  </data>
  <data name="LoggerBase_GetEndDateLimit_NotImplemented" xml:space="preserve">
    <value>The {0} logger has not yet implemented the Get(endDate, limit) method.</value>
  </data>
  <data name="LoggerBase_GetEndDateStartDate_NotImplemented" xml:space="preserve">
    <value>The {0} logger has not yet implemented the Get(endDate, startDate) method.</value>
  </data>
  <data name="LoggerBase_GetForwardStartDateLimit_NotImplemented" xml:space="preserve">
    <value>The {0} logger has not yet implemented the Get(startDate, limit) method.</value>
  </data>
  <data name="LoggingException_InnerExceptionCannotBeNull" xml:space="preserve">
    <value>Parameter 'innerException' can not be null</value>
  </data>
  <data name="LoggingException_MessageCannotBeNull" xml:space="preserve">
    <value>Parameter 'message' can not be null</value>
  </data>
  <data name="LoggingException_ParametersCannotBeNull" xml:space="preserve">
    <value>Parameter 'parameters' can not be null</value>
  </data>
  <data name="LogKeys_ApplicationGuid" xml:space="preserve">
    <value>Application GUID</value>
  </data>
  <data name="LogKeys_ApplicationName" xml:space="preserve">
    <value>Application</value>
  </data>
  <data name="LogKeys_Context" xml:space="preserve">
    <value>Context</value>
  </data>
  <data name="LogKeys_Culture" xml:space="preserve">
    <value>Culture</value>
  </data>
  <data name="LogKeys_Exception" xml:space="preserve">
    <value>Exception type</value>
  </data>
  <data name="LogKeys_Guid" xml:space="preserve">
    <value>GUID</value>
  </data>
  <data name="LogKeys_InnerException" xml:space="preserve">
    <value>Inner Exception</value>
  </data>
  <data name="LogKeys_InnerExceptions" xml:space="preserve">
    <value>Inner Exceptions</value>
  </data>
  <data name="LogKeys_Level" xml:space="preserve">
    <value>Level</value>
  </data>
  <data name="LogKeys_Message" xml:space="preserve">
    <value>Message</value>
  </data>
  <data name="LogKeys_Resource" xml:space="preserve">
    <value>Resource</value>
  </data>
  <data name="LogKeys_StackTrace" xml:space="preserve">
    <value>Stack trace</value>
  </data>
  <data name="LogKeys_StoredProcedure" xml:space="preserve">
    <value>Stored Procedure</value>
  </data>
  <data name="LogKeys_ThreadID" xml:space="preserve">
    <value>Thread ID</value>
  </data>
  <data name="LogKeys_ThreadName" xml:space="preserve">
    <value>Thread Name</value>
  </data>
  <data name="LogKeys_TimeStamp" xml:space="preserve">
    <value>Timestamp</value>
  </data>
  <data name="LogStatic_AddOrUpdateLogger_RetrievalNotSupported" xml:space="preserve">
    <value>Can not copy logs over from {0} logger as log retrieval is not supported!</value>
  </data>
  <data name="LogStatic_Get_LimitLessThanZero" xml:space="preserve">
    <value>Cannot retrieve logs, limit is not greater than zero!</value>
  </data>
  <data name="LogStatic_Get_NoLogCacheAvailable" xml:space="preserve">
    <value>No log cache available.</value>
  </data>
  <data name="LogStatic_Get_RetrievalNotSupported" xml:space="preserve">
    <value>The {0} logger does not support log querying.</value>
  </data>
  <data name="LogStatic_Get_StartGreaterThanOrEqualToCurrent" xml:space="preserve">
    <value>Cannot retrieve logs, start date is greater or equal than current date!</value>
  </data>
  <data name="LogStatic_Get_StartGreaterThanOrEqualToEnd" xml:space="preserve">
    <value>Cannot retrieve logs, start date is greater or equal to end date!</value>
  </data>
  <data name="LogStatic_LoadConfiguration_ErrorCreatingLogger" xml:space="preserve">
    <value>Error occurred whilst creating logger '{0}' as specified in configuration file.</value>
  </data>
  <data name="LogStatic_LogBatch_FatalErrorOccured" xml:space="preserve">
    <value>Fatal error occurred whilst running the '{0}' logger, disabling.</value>
  </data>
  <data name="LogStatic_LoggerThread_FatalErrorWhilstLogging" xml:space="preserve">
    <value>Fatal error whilst logging - aborting.</value>
  </data>
  <data name="Log_Application_Exiting" xml:space="preserve">
    <value>Application '{0}' [{1}] exiting.</value>
  </data>
  <data name="Log_Cleanup_Finished" xml:space="preserve">
    <value>Finished logging clean up.</value>
  </data>
  <data name="Log_Configured" xml:space="preserve">
    <value>Application '{0}' [{1}] configured.</value>
  </data>
  <data name="Log_GetResourceManager_FatalError" xml:space="preserve">
    <value>Fatal error trying to retrieve resource manager for the '{0}' type</value>
  </data>
  <data name="Log_Invalid_Format_Singular" xml:space="preserve">
    <value>Unexpected singular format '{0}'.</value>
  </data>
  <data name="Log_Invalid_Format_XML_JSON" xml:space="preserve">
    <value>Invalid log format - cannot output as both XML &amp; JSON.</value>
  </data>
  <data name="Log_Logger_Multiple_Instances" xml:space="preserve">
    <value>The '{0}' logger cannot be added as there is a logger present of the same type that does not support multiple instances.</value>
  </data>
  <data name="Log_OnUnhandledException" xml:space="preserve">
    <value>An unhandled exception has occured. See inner exception for details.</value>
  </data>
  <data name="Log_PerfCategory_Access_Denied" xml:space="preserve">
    <value>Performance counters cannot be accessed.</value>
  </data>
  <data name="Log_PerfCategory_GUID" xml:space="preserve">
    <value>Performance counters can be found with instance GUID '{0}'.</value>
  </data>
  <data name="Log_ToString_Invalid_Format" xml:space="preserve">
    <value>The '{0}' format is not valid for a log.  See the LogFormat enumeration for valid values.</value>
  </data>
  <data name="MemoryLogger_CacheExpiryLessThanTenSeconds" xml:space="preserve">
    <value>Could not create memory logger as cache expiry '{0}' was less than 10s.</value>
  </data>
  <data name="MemoryLogger_MaximumLogsLessThanOne" xml:space="preserve">
    <value>Could not create memory logger as maximum log entries '{0}' was less than 1.</value>
  </data>
  <data name="SqlLogger_CouldNotRegisterService" xml:space="preserve">
    <value>Could not register service '{0}'</value>
  </data>
  <data name="Sqllogger_LogExpiryLessThanOneSecond" xml:space="preserve">
    <value>Cannot expire log entries in less than one second.</value>
  </data>
  <data name="SqlLogger_NoConnectionStringProvided" xml:space="preserve">
    <value>Could not create SQL Logger as no connection string was supplied.</value>
  </data>
  <data name="Sqllogger_TimeoutLessThanOneSecond" xml:space="preserve">
    <value>The specified SQL timeout ({0}) was less than 1s.</value>
  </data>
  <data name="LogFormat_Short" xml:space="preserve">
    <value>{!fgcolor:Teal}{time:{Value:HH:mm:ss.ffff}} {!fgcolor:LogLevel}{level:{Value}} {!fgcolor}	{message:{Value}}
</value>
  </data>
  <data name="LogFormat_Verbose" xml:space="preserve">
    <value>{!fgcolor:LogLevel}{!header}{!layout:aCentre}{level:{Value}}{!fgcolor}{!layout}{message:
{!fgcolor:Teal}{Key}{!fgcolor}	: {!fgcolor:White}{Value}{!fgcolor}}{time}{guid}{thread:
{!fgcolor:Teal}{Key}{!fgcolor}	: {Value}{threadid: ({Value})}}{exception}{innerexception}{sproc}{context}{stack:
{!fgcolor:Gray}{!header:-}{!layout:aCentre}{!fgcolor:Teal}{Key}{!fgcolor}{!layout:i6;f3;aLeft}
{!fgcolor:Gray}{Value}{!fgcolor}{!layout}}
{!fgcolor:LogLevel}{!header}{!fgcolor}</value>
  </data>
  <data name="LogFormat_XML" xml:space="preserve">
    <value>&lt;Log&gt;
{!layout:f4}{message:{xml}}{level:{xml}}{time:{xml}}{guid:{xml}}{thread:{xml}}{threadid:{xml}}{exception:{xml}}{innerexception:{xml}}{sproc:{xml}}{context:{xml}}{stack:{xml}}{!layout}&lt;/Log&gt;</value>
  </data>
  <data name="LogFormat_HTML" xml:space="preserve">
    <value>&lt;table&gt;
&lt;tr&gt;&lt;td class="{level:{ValueXml}}"&gt;{level:{ValueHtml}}&lt;/td&gt;&lt;td&gt;{message:{ValueHtml}}&lt;/td&gt;&lt;/tr&gt;
{!layout:f4}{time:{html}}{guid:{html}}{thread:{html}}{threadid:{html}}{exception:{html}}{innerexception:{html}}{sproc:{html}}{context:{html}}{stack:{html}}{!layout}&lt;/table&gt;</value>
  </data>
  <data name="ConsoleLogger_NotConsole" xml:space="preserve">
    <value>Application must be running in the console to use the ConsoleLogger.</value>
  </data>
  <data name="Log_NoMessage" xml:space="preserve">
    <value>A format or resource, and/or an exception must be specified.</value>
  </data>
  <data name="Log_FormatAndResource" xml:space="preserve">
    <value>Cannot use both a format string and a resource.</value>
  </data>
  <data name="LogFormat_All" xml:space="preserve">
    <value>{!fgcolor:LogLevel}{!header}{!layout:aCentre}{level:{Value}}{!fgcolor}{!layout}{message:
{!fgcolor:Teal}{Key}{!fgcolor}	: {!fgcolor:White}{Value}{!fgcolor}}{resource}{culture}{time}{guid}{thread:
{!fgcolor:Teal}{Key}{!fgcolor}	: {Value}{threadid: ({Value})}}{exception}{innerexception}{sproc}{application}{applicationguid}{context}{stack:
{!fgcolor:Gray}{!header:-}{!layout:aCentre}{!fgcolor:Teal}{Key}{!fgcolor}{!layout:i6;f3;aLeft}
{!fgcolor:Gray}{Value}{!fgcolor}{!layout}}
{!fgcolor:LogLevel}{!header}{!fgcolor}</value>
  </data>
  <data name="LogFormat_JSON" xml:space="preserve">
    <value>{!layout:f4}{level:{jsonFirst}}{message:{json}}{time:{json}}{guid:{json}}{thread:{json}}{threadid:{json}}{exception:{json}}{innerexception:{json}}{sproc:{json}}{context:,
{json}}{stack:{json}}{!layout}</value>
  </data>
  <data name="EmailLogger_ToAddressMissing" xml:space="preserve">
    <value>At least one to/CC/BCC address must be given.</value>
  </data>
  <data name="EmailLogger_InvalidBufferCount" xml:space="preserve">
    <value>The bufferCount must be greater than zero when an infinite bufferDuration is used.</value>
  </data>
  <data name="EmailLogger_SendLogs_Error" xml:space="preserve">
    <value>An error occurred when sending a log email.</value>
  </data>
  <data name="LogKeys_LocalTimeStamp" xml:space="preserve">
    <value>Local Timestamp</value>
  </data>
</root>